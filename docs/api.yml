openapi: 3.0.1
info:
  title: "WIP: Puppet Data Service API"
  description: "This is the API documentation for the Puppet Data Service API. You can find out more about the [PDS API at here](https://github.com/reidmv/reidmv-puppet_data_service). For this sample, you can use the api key `special-key` to test the authorization filters."
  termsOfService: http://swagger.io/terms/
  contact:
    email: solarch-team@puppet.com
  license:
    name: TBD
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: localhost:3000/v1
tags:
  - name: users
    description: Every config change should be started with an authorized User
    externalDocs:
      description: TBD Find out more
      url: https://puppet.com/
  - name: nodes
    description: Node details and configuration data, Nodedata stores configuration details for a specific node and Hierdata manages your Hiera Key:Value as a service
  - name: hiera-data
    description: Hiera data key/value pairs

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all available users
      description: This can only be done by the logged in user with a superadmin role.
      operationId: getAllUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/NewUsers"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      x-codegen-request-body-name: body

  /users/{username}:
    get:
      tags:
        - users
      summary: Get user by username
      description: Retrieve a specific user.
      operationId: getUserByUsername
      parameters:
        - $ref: "#/components/parameters/Username"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid user supplied"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: "User not found"
    delete:
      tags:
        - users
      summary: Deletes a user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/Username"
      responses:
        "200":
          description: Ok
          content: {}
        "400":
          description: Invalid username supplied
          content: {}
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Username not found
          content: {}

  /users/{username}/token:
    get:
      tags:
        - users
      summary: Get API token by username
      description: Retrieve an API token for the user
      operationId: getTokenByUsername
      parameters:
        - $ref: "#/components/parameters/Username"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: "Invalid user supplied"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: "User not found"

  /nodes:
    get:
      tags:
        - nodes
      summary: Get all available nodes
      description: This can only be done by the logged in user.
      operationId: getAllNodes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Node"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - nodes
      summary: Create new node(s)
      description: This can only be done by the logged in user.
      operationId: createNode
      requestBody:
        $ref: "#/components/requestBodies/NewNodes"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Node"
        "401":
          $ref: '#/components/responses/UnauthorizedError'

  /nodes/{name}:
    get:
      tags:
        - nodes
      summary: Get node by node name
      description: Retrieve a specific node.
      operationId: getNodeByName
      parameters:
        - $ref: "#/components/parameters/NodeName"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: Invalid node-name supplied
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Node not found

    put:
      tags:
        - nodes
      summary: Create a new node or replace an existing node
      description: This can only be done by the logged in user.
      operationId: putNodeByName
      parameters:
        - $ref: "#/components/parameters/NodeName"
      requestBody:
        $ref: "#/components/requestBodies/NewNode"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: Invalid node-name supplied
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Node not found

    delete:
      tags:
        - nodes
      summary: Deletes a node
      description: This can only be done by the logged in user.
      operationId: deleteNode
      parameters:
        - $ref: "#/components/parameters/NodeName"
      responses:
        "200":
          description: Ok
          content: {}
        "400":
          description: Invalid Node name supplied
          content: {}
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Nodedata not found
          content: {}

  /hiera-data:
    get:
      tags:
        - hiera-data
      summary: Get all hiera data available in the system
      description: Get all Hiera data
      operationId: getHieraData
      parameters:
        - $ref: "#/components/parameters/OptionalHieraLevel"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HieraValue"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - hiera-data
      summary: Create new Hiera data value(s)
      description: This can only be done by the logged in user.
      operationId: createHieraData
      requestBody:
        $ref: "#/components/requestBodies/NewHieraData"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HieraValue"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      x-codegen-request-body-name: body

  /hiera-data/{level}/{key}:
    get:
      tags:
        - hiera-data
      summary: Get a specific hiera value
      description: Get Hiera data that matches the given {level} and {key}
      operationId: getHieraDataWithLevelAndKey
      parameters:
        - $ref: "#/components/parameters/HieraLevel"
        - $ref: "#/components/parameters/HieraKey"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HieraValue"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - hiera-data
      summary: Upserts a specific hiera object
      description: Create/Update Hiera data using {level} and {key} as the identifier
      operationId: upsertHieraDataWithLevelAndKey
      parameters:
        - $ref: "#/components/parameters/HieraLevel"
        - $ref: "#/components/parameters/HieraKey"
      requestBody:
        $ref: "#/components/requestBodies/EditHieraValue"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HieraValue"
        "401":
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - hiera-data
      summary: Deletes a Hieradata object
      description: Permanently removes the Hiera object that matches the level/key ID
      operationId: deleteHieraDataObject
      parameters:
        - $ref: "#/components/parameters/HieraLevel"
        - $ref: "#/components/parameters/HieraKey"
      responses:
        "200":
          description: Ok
          content: {}
        "400":
          description: Invalid level or key supplied
          content: {}
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Hieradata not found
          content: {}

components:
  schemas:
    Username:
      type: string
      pattern: '^([-\d\w.]+){2}$'

    TimestampProperties:
      type: object
      properties:
        created-at:
          type: string
          format: date-time
        updated-at:
          type: string
          format: date-time

    ImmutableUserProperties:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"

    EditableUserProperties:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          description: User role
          default: operator
          enum:
            - operator
            - superadmin

    ReadOnlyUserProperties:
      type: object
      properties:
        status:
          type: string
          description: User status
          default: active
          enum:
            - active
            - inactive
            - deleted

    User:
      allOf:
        - $ref: "#/components/schemas/ImmutableUserProperties"
        - $ref: "#/components/schemas/EditableUserProperties"
        - $ref: "#/components/schemas/ReadOnlyUserProperties"
        - $ref: "#/components/schemas/TimestampProperties"

    Token:
      type: object
      properties:
        token:
          type: string
          description: API token

    ImmutableNodeProperties:
      type: object
      properties:
        name:
          type: string

    EditableNodeProperties:
      type: object
      properties:
        code-environment:
          type: string
          description: Code environment
          enum:
            - staging
            - production
            - compliance
        classes:
          type: object
          additionalProperties:
            type: string
        trusted-data:
          type: object

    Node:
      allOf:
        - $ref: "#/components/schemas/ImmutableNodeProperties"
        - $ref: "#/components/schemas/EditableNodeProperties"
        - $ref: "#/components/schemas/TimestampProperties"

    ImmutableHieraValueProperties:
      type: object
      properties:
        level:
          type: string
        key:
          type: string

    EditableHieraValueProperties:
      type: object
      properties:
        value:
          nullable: true
          description: The value to set the Hiera key to

    HieraValue:
      allOf:
        - $ref: "#/components/schemas/ImmutableHieraValueProperties"
        - $ref: "#/components/schemas/EditableHieraValueProperties"
        - $ref: "#/components/schemas/TimestampProperties"

  parameters:
    Username:
      name: username
      in: path
      description: "The username"
      required: true
      schema:
        $ref: "#/components/schemas/Username"

    NodeName:
      name: name
      in: path
      description: "The node name to be fetched or modified. Use node1 for testing."
      required: true
      schema:
        type: string

    HieraLevel:
      name: level
      in: path
      description: "The Hiera level"
      required: true
      schema:
        type: string

    HieraKey:
      name: key
      in: path
      description: "The Hiera key"
      required: true
      schema:
        type: string

    OptionalHieraLevel:
      name: level
      in: query
      description: "(Optional) This will filter by Hiera level (URL encoded), e.g. 'level%2Fone%2Fglobal'"
      required: false
      schema:
        type: string

  requestBodies:
    NewUsers:
      description: Create user object
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ImmutableUserProperties"
                - $ref: "#/components/schemas/EditableUserProperties"
                - required: ["username"]

    NewNodes:
      description: Create node object(s)
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ImmutableNodeProperties"
                - $ref: "#/components/schemas/EditableNodeProperties"
                - required: ["name"]

    NewNode:
      description: Create node object
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ImmutableNodeProperties"
              - $ref: "#/components/schemas/EditableNodeProperties"
              - required: ["name"]

    NewHieraData:
      description: Create new Hiera data value(s)
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/ImmutableHieraValueProperties"
              - $ref: "#/components/schemas/EditableHieraValueProperties"
              - required: ["level", "key", "value"]

    EditHieraValue:
      description: Create or edit a Hiera value at a specified level and key
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/EditableHieraValueProperties"
              - required: ["value"]
  responses:
    UnauthorizedError:
      description: Access (Bearer) token is missing or invalid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [] 
