openapi: 3.0.1
info:
  title: 'WIP: Puppet Data Service API'
  description: 'This is the API documentation for the Puppet Data Service API.  You can find out more about     the [PDS API at here](https://github.com/reidmv/reidmv-puppet_data_service). For this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: solarch-team@puppet.com
  license:
    name: TBD
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: localhost:3000/v1
tags:
- name: users
  description: Every config change should be started with an authorized User
  externalDocs:
    description: TBD Find out more
    url: https://puppet.com/
- name: nodes
  description: Node details and configuration data, Nodedata stores configuration details for a specific node and Hierdata manages your Hiera Key:Value as a service

paths:
  /users:
    get:
      tags:
      - users
      summary: Get all available users
      description: This can only be done by the logged in user with a superadmin role.
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/{id}:
    get:
      tags:
      - users
      summary: Get user by user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The user ID that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user-id supplied
          content: {}
        404:
          description: User not found
          content: {}

  /nodes:
    get:
      tags:
      - nodes
      summary: Get all available nodes
      description: This can only be done by the logged in user.
      operationId: getAllNodes
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'

  /nodes/{id}:
    get:
      tags:
      - nodes
      summary: Get node by node id
      operationId: getNodeById
      parameters:
      - name: id
        in: path
        description: 'The node ID that needs to be fetched. Use node1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        400:
          description: Invalid user-id supplied
          content: {}
        404:
          description: User not found
          content: {}

  /nodes/{id}/nodedata:
    get:
      tags:
      - nodes
      summary: Get nodedata by node id
      operationId: getNodeDataByNodeId
      parameters:
      - name: id
        in: path
        description: 'The nodedata that needs to be fetched. Use node1 as the node ID for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodedata'
        400:
          description: Invalid node-id supplied
          content: {}
        404:
          description: Node not found
          content: {}

  /nodes/{id}/hieradata:
    get:
      tags:
      - nodes
      summary: Get hieradata by node id
      operationId: getHieraDataByNodeId
      parameters:
      - name: id
        in: path
        description: 'The hieradata that needs to be fetched. Use node1 as the node ID for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hieradata'
        400:
          description: Invalid node-id supplied
          content: {}
        404:
          description: Node not found
          content: {}

components:
  schemas:
    NewUser:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          description: User role
          default: operator
          enum:
          - operator
          - superadmin
        temp_token:
          type: string
        status:
          type: string
          description: User status
          default: active
          enum:
          - active
          - inactive
          - deleted
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - properties:
            id:
              type: string
              format: uuid
      
    Node:
      type: object
      properties:
        name:
          type: string
        nodedata_count:
          type: integer
          format: int32
        hieradata_count:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Nodedata:
      type: object
      properties:
        name:
          type: string
        code_environment:
          type: string
        classes:
          type: object
          additionalProperties:
            type: string
        trusted_data:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Hieradata:
      type: object
      properties:
        level:
          type: string
        key:
          type: string
        value:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  requestBodies:
    NewUser:
      description: Created user object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/NewUser'
              - required: ['email']

  securitySchemes:
    pds_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://tbd.swagger.io/oauth/dialog
          scopes:
            write:pets: modify data in your account
            read:pets: read your data
    api_key:
      type: apiKey
      name: api_key
      in: header
