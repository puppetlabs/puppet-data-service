// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for EditableNodePropertiesCodeEnvironment.
const (
	EditableNodePropertiesCodeEnvironmentCompliance EditableNodePropertiesCodeEnvironment = "compliance"

	EditableNodePropertiesCodeEnvironmentProduction EditableNodePropertiesCodeEnvironment = "production"

	EditableNodePropertiesCodeEnvironmentStaging EditableNodePropertiesCodeEnvironment = "staging"
)

// Defines values for EditableUserPropertiesRole.
const (
	EditableUserPropertiesRoleAdministrator EditableUserPropertiesRole = "administrator"

	EditableUserPropertiesRoleOperator EditableUserPropertiesRole = "operator"
)

// Defines values for ReadOnlyUserPropertiesStatus.
const (
	ReadOnlyUserPropertiesStatusActive ReadOnlyUserPropertiesStatus = "active"

	ReadOnlyUserPropertiesStatusDeleted ReadOnlyUserPropertiesStatus = "deleted"

	ReadOnlyUserPropertiesStatusInactive ReadOnlyUserPropertiesStatus = "inactive"
)

// EditableHieraValueProperties defines model for EditableHieraValueProperties.
type EditableHieraValueProperties struct {
	// The value to set the Hiera key to
	Value *interface{} `json:"value"`
}

// EditableNodeProperties defines model for EditableNodeProperties.
type EditableNodeProperties struct {
	Classes *[]string `json:"classes,omitempty"`

	// Code environment
	CodeEnvironment *EditableNodePropertiesCodeEnvironment `json:"code-environment"`
	Data            *map[string]interface{}                `json:"data,omitempty"`
}

// Code environment
type EditableNodePropertiesCodeEnvironment string

// EditableUserProperties defines model for EditableUserProperties.
type EditableUserProperties struct {
	Email *string `json:"email,omitempty"`

	// User role
	Role *EditableUserPropertiesRole `json:"role,omitempty"`
}

// User role
type EditableUserPropertiesRole string

// HieraValue defines model for HieraValue.
type HieraValue struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableHieraValueProperties)
	ImmutableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// ImmutableHieraValueProperties defines model for ImmutableHieraValueProperties.
type ImmutableHieraValueProperties struct {
	Key   *string `json:"key,omitempty"`
	Level *string `json:"level,omitempty"`
}

// ImmutableNodeProperties defines model for ImmutableNodeProperties.
type ImmutableNodeProperties struct {
	Name *string `json:"name,omitempty"`
}

// ImmutableUserProperties defines model for ImmutableUserProperties.
type ImmutableUserProperties struct {
	Username *Username `json:"username,omitempty"`
}

// Node defines model for Node.
type Node struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableNodeProperties)
	ImmutableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableNodeProperties)
	EditableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// ReadOnlyUserProperties defines model for ReadOnlyUserProperties.
type ReadOnlyUserProperties struct {
	// User status
	Status *ReadOnlyUserPropertiesStatus `json:"status,omitempty"`
}

// User status
type ReadOnlyUserPropertiesStatus string

// TimestampProperties defines model for TimestampProperties.
type TimestampProperties struct {
	CreatedAt *time.Time `json:"created-at,omitempty"`
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

// Token defines model for Token.
type Token struct {
	// API token
	Token *string `json:"token,omitempty"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableUserProperties)
	ImmutableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableUserProperties)
	EditableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ReadOnlyUserProperties)
	ReadOnlyUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// Username defines model for Username.
type Username string

// HieraKey defines model for HieraKey.
type HieraKey string

// HieraLevel defines model for HieraLevel.
type HieraLevel string

// NodeName defines model for NodeName.
type NodeName string

// OptionalHieraLevel defines model for OptionalHieraLevel.
type OptionalHieraLevel string

// EditHieraValue defines model for EditHieraValue.
type EditHieraValue struct {
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewHieraData defines model for NewHieraData.
type NewHieraData []struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableHieraValueProperties)
	ImmutableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewNode defines model for NewNode.
type NewNode struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableNodeProperties)
	ImmutableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableNodeProperties)
	EditableNodeProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewNodes defines model for NewNodes.
type NewNodes []struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableNodeProperties)
	ImmutableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableNodeProperties)
	EditableNodeProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableUserProperties)
	ImmutableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableUserProperties)
	EditableUserProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewUsers defines model for NewUsers.
type NewUsers []struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableUserProperties)
	ImmutableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableUserProperties)
	EditableUserProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// GetHieraDataParams defines parameters for GetHieraData.
type GetHieraDataParams struct {
	// (Optional) This will filter by Hiera level (URL encoded), e.g. 'level%2Fone%2Fglobal'
	Level *OptionalHieraLevel `json:"level,omitempty"`
}

// CreateHieraDataJSONRequestBody defines body for CreateHieraData for application/json ContentType.
type CreateHieraDataJSONRequestBody NewHieraData

// UpsertHieraDataWithLevelAndKeyJSONRequestBody defines body for UpsertHieraDataWithLevelAndKey for application/json ContentType.
type UpsertHieraDataWithLevelAndKeyJSONRequestBody EditHieraValue

// CreateNodeJSONRequestBody defines body for CreateNode for application/json ContentType.
type CreateNodeJSONRequestBody NewNodes

// PutNodeByNameJSONRequestBody defines body for PutNodeByName for application/json ContentType.
type PutNodeByNameJSONRequestBody NewNode

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody NewUsers

// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody NewUser

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHieraData request
	GetHieraData(ctx context.Context, params *GetHieraDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHieraData request with any body
	CreateHieraDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHieraData(ctx context.Context, body CreateHieraDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHieraDataObject request
	DeleteHieraDataObject(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHieraDataWithLevelAndKey request
	GetHieraDataWithLevelAndKey(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertHieraDataWithLevelAndKey request with any body
	UpsertHieraDataWithLevelAndKeyWithBody(ctx context.Context, level HieraLevel, key HieraKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertHieraDataWithLevelAndKey(ctx context.Context, level HieraLevel, key HieraKey, body UpsertHieraDataWithLevelAndKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllNodes request
	GetAllNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNode request with any body
	CreateNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNode(ctx context.Context, body CreateNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNode request
	DeleteNode(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeByName request
	GetNodeByName(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNodeByName request with any body
	PutNodeByNameWithBody(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNodeByName(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUsers request
	GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByUsername request
	GetUserByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUser request with any body
	PutUserWithBody(ctx context.Context, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUser(ctx context.Context, username Username, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenByUsername request
	GetTokenByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHieraData(ctx context.Context, params *GetHieraDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHieraDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHieraDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHieraDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHieraData(ctx context.Context, body CreateHieraDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHieraDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHieraDataObject(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHieraDataObjectRequest(c.Server, level, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHieraDataWithLevelAndKey(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHieraDataWithLevelAndKeyRequest(c.Server, level, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertHieraDataWithLevelAndKeyWithBody(ctx context.Context, level HieraLevel, key HieraKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertHieraDataWithLevelAndKeyRequestWithBody(c.Server, level, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertHieraDataWithLevelAndKey(ctx context.Context, level HieraLevel, key HieraKey, body UpsertHieraDataWithLevelAndKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertHieraDataWithLevelAndKeyRequest(c.Server, level, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNode(ctx context.Context, body CreateNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNode(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNodeRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeByName(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNodeByNameWithBody(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNodeByNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNodeByName(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNodeByNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserWithBody(ctx context.Context, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUser(ctx context.Context, username Username, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHieraDataRequest generates requests for GetHieraData
func NewGetHieraDataRequest(server string, params *GetHieraDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHieraDataRequest calls the generic CreateHieraData builder with application/json body
func NewCreateHieraDataRequest(server string, body CreateHieraDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHieraDataRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHieraDataRequestWithBody generates requests for CreateHieraData with any type of body
func NewCreateHieraDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHieraDataObjectRequest generates requests for DeleteHieraDataObject
func NewDeleteHieraDataObjectRequest(server string, level HieraLevel, key HieraKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "level", runtime.ParamLocationPath, level)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera-data/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHieraDataWithLevelAndKeyRequest generates requests for GetHieraDataWithLevelAndKey
func NewGetHieraDataWithLevelAndKeyRequest(server string, level HieraLevel, key HieraKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "level", runtime.ParamLocationPath, level)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera-data/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertHieraDataWithLevelAndKeyRequest calls the generic UpsertHieraDataWithLevelAndKey builder with application/json body
func NewUpsertHieraDataWithLevelAndKeyRequest(server string, level HieraLevel, key HieraKey, body UpsertHieraDataWithLevelAndKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertHieraDataWithLevelAndKeyRequestWithBody(server, level, key, "application/json", bodyReader)
}

// NewUpsertHieraDataWithLevelAndKeyRequestWithBody generates requests for UpsertHieraDataWithLevelAndKey with any type of body
func NewUpsertHieraDataWithLevelAndKeyRequestWithBody(server string, level HieraLevel, key HieraKey, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "level", runtime.ParamLocationPath, level)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera-data/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllNodesRequest generates requests for GetAllNodes
func NewGetAllNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNodeRequest calls the generic CreateNode builder with application/json body
func NewCreateNodeRequest(server string, body CreateNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNodeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNodeRequestWithBody generates requests for CreateNode with any type of body
func NewCreateNodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNodeRequest generates requests for DeleteNode
func NewDeleteNodeRequest(server string, name NodeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeByNameRequest generates requests for GetNodeByName
func NewGetNodeByNameRequest(server string, name NodeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNodeByNameRequest calls the generic PutNodeByName builder with application/json body
func NewPutNodeByNameRequest(server string, name NodeName, body PutNodeByNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNodeByNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPutNodeByNameRequestWithBody generates requests for PutNodeByName with any type of body
func NewPutNodeByNameRequestWithBody(server string, name NodeName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllUsersRequest generates requests for GetAllUsers
func NewGetAllUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByUsernameRequest generates requests for GetUserByUsername
func NewGetUserByUsernameRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserRequest calls the generic PutUser builder with application/json body
func NewPutUserRequest(server string, username Username, body PutUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPutUserRequestWithBody generates requests for PutUser with any type of body
func NewPutUserRequestWithBody(server string, username Username, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTokenByUsernameRequest generates requests for GetTokenByUsername
func NewGetTokenByUsernameRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHieraData request
	GetHieraDataWithResponse(ctx context.Context, params *GetHieraDataParams, reqEditors ...RequestEditorFn) (*GetHieraDataResponse, error)

	// CreateHieraData request with any body
	CreateHieraDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHieraDataResponse, error)

	CreateHieraDataWithResponse(ctx context.Context, body CreateHieraDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHieraDataResponse, error)

	// DeleteHieraDataObject request
	DeleteHieraDataObjectWithResponse(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*DeleteHieraDataObjectResponse, error)

	// GetHieraDataWithLevelAndKey request
	GetHieraDataWithLevelAndKeyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*GetHieraDataWithLevelAndKeyResponse, error)

	// UpsertHieraDataWithLevelAndKey request with any body
	UpsertHieraDataWithLevelAndKeyWithBodyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertHieraDataWithLevelAndKeyResponse, error)

	UpsertHieraDataWithLevelAndKeyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, body UpsertHieraDataWithLevelAndKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertHieraDataWithLevelAndKeyResponse, error)

	// GetAllNodes request
	GetAllNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllNodesResponse, error)

	// CreateNode request with any body
	CreateNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNodeResponse, error)

	CreateNodeWithResponse(ctx context.Context, body CreateNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNodeResponse, error)

	// DeleteNode request
	DeleteNodeWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error)

	// GetNodeByName request
	GetNodeByNameWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*GetNodeByNameResponse, error)

	// PutNodeByName request with any body
	PutNodeByNameWithBodyWithResponse(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error)

	PutNodeByNameWithResponse(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error)

	// GetAllUsers request
	GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserByUsername request
	GetUserByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUserByUsernameResponse, error)

	// PutUser request with any body
	PutUserWithBodyWithResponse(ctx context.Context, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error)

	PutUserWithResponse(ctx context.Context, username Username, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error)

	// GetTokenByUsername request
	GetTokenByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetTokenByUsernameResponse, error)
}

type GetHieraDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HieraValue
}

// Status returns HTTPResponse.Status
func (r GetHieraDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHieraDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHieraDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]HieraValue
}

// Status returns HTTPResponse.Status
func (r CreateHieraDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHieraDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHieraDataObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteHieraDataObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHieraDataObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHieraDataWithLevelAndKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HieraValue
}

// Status returns HTTPResponse.Status
func (r GetHieraDataWithLevelAndKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHieraDataWithLevelAndKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertHieraDataWithLevelAndKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HieraValue
	JSON201      *HieraValue
}

// Status returns HTTPResponse.Status
func (r UpsertHieraDataWithLevelAndKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertHieraDataWithLevelAndKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Node
}

// Status returns HTTPResponse.Status
func (r GetAllNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Node
}

// Status returns HTTPResponse.Status
func (r CreateNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
}

// Status returns HTTPResponse.Status
func (r GetNodeByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNodeByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
	JSON201      *Node
}

// Status returns HTTPResponse.Status
func (r PutNodeByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNodeByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetAllUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r PutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r GetTokenByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHieraDataWithResponse request returning *GetHieraDataResponse
func (c *ClientWithResponses) GetHieraDataWithResponse(ctx context.Context, params *GetHieraDataParams, reqEditors ...RequestEditorFn) (*GetHieraDataResponse, error) {
	rsp, err := c.GetHieraData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHieraDataResponse(rsp)
}

// CreateHieraDataWithBodyWithResponse request with arbitrary body returning *CreateHieraDataResponse
func (c *ClientWithResponses) CreateHieraDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHieraDataResponse, error) {
	rsp, err := c.CreateHieraDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHieraDataResponse(rsp)
}

func (c *ClientWithResponses) CreateHieraDataWithResponse(ctx context.Context, body CreateHieraDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHieraDataResponse, error) {
	rsp, err := c.CreateHieraData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHieraDataResponse(rsp)
}

// DeleteHieraDataObjectWithResponse request returning *DeleteHieraDataObjectResponse
func (c *ClientWithResponses) DeleteHieraDataObjectWithResponse(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*DeleteHieraDataObjectResponse, error) {
	rsp, err := c.DeleteHieraDataObject(ctx, level, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHieraDataObjectResponse(rsp)
}

// GetHieraDataWithLevelAndKeyWithResponse request returning *GetHieraDataWithLevelAndKeyResponse
func (c *ClientWithResponses) GetHieraDataWithLevelAndKeyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, reqEditors ...RequestEditorFn) (*GetHieraDataWithLevelAndKeyResponse, error) {
	rsp, err := c.GetHieraDataWithLevelAndKey(ctx, level, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHieraDataWithLevelAndKeyResponse(rsp)
}

// UpsertHieraDataWithLevelAndKeyWithBodyWithResponse request with arbitrary body returning *UpsertHieraDataWithLevelAndKeyResponse
func (c *ClientWithResponses) UpsertHieraDataWithLevelAndKeyWithBodyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertHieraDataWithLevelAndKeyResponse, error) {
	rsp, err := c.UpsertHieraDataWithLevelAndKeyWithBody(ctx, level, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertHieraDataWithLevelAndKeyResponse(rsp)
}

func (c *ClientWithResponses) UpsertHieraDataWithLevelAndKeyWithResponse(ctx context.Context, level HieraLevel, key HieraKey, body UpsertHieraDataWithLevelAndKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertHieraDataWithLevelAndKeyResponse, error) {
	rsp, err := c.UpsertHieraDataWithLevelAndKey(ctx, level, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertHieraDataWithLevelAndKeyResponse(rsp)
}

// GetAllNodesWithResponse request returning *GetAllNodesResponse
func (c *ClientWithResponses) GetAllNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllNodesResponse, error) {
	rsp, err := c.GetAllNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllNodesResponse(rsp)
}

// CreateNodeWithBodyWithResponse request with arbitrary body returning *CreateNodeResponse
func (c *ClientWithResponses) CreateNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNodeResponse, error) {
	rsp, err := c.CreateNodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNodeResponse(rsp)
}

func (c *ClientWithResponses) CreateNodeWithResponse(ctx context.Context, body CreateNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNodeResponse, error) {
	rsp, err := c.CreateNode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNodeResponse(rsp)
}

// DeleteNodeWithResponse request returning *DeleteNodeResponse
func (c *ClientWithResponses) DeleteNodeWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error) {
	rsp, err := c.DeleteNode(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNodeResponse(rsp)
}

// GetNodeByNameWithResponse request returning *GetNodeByNameResponse
func (c *ClientWithResponses) GetNodeByNameWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*GetNodeByNameResponse, error) {
	rsp, err := c.GetNodeByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeByNameResponse(rsp)
}

// PutNodeByNameWithBodyWithResponse request with arbitrary body returning *PutNodeByNameResponse
func (c *ClientWithResponses) PutNodeByNameWithBodyWithResponse(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error) {
	rsp, err := c.PutNodeByNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNodeByNameResponse(rsp)
}

func (c *ClientWithResponses) PutNodeByNameWithResponse(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error) {
	rsp, err := c.PutNodeByName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNodeByNameResponse(rsp)
}

// GetAllUsersWithResponse request returning *GetAllUsersResponse
func (c *ClientWithResponses) GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error) {
	rsp, err := c.GetAllUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserByUsernameWithResponse request returning *GetUserByUsernameResponse
func (c *ClientWithResponses) GetUserByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUserByUsernameResponse, error) {
	rsp, err := c.GetUserByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByUsernameResponse(rsp)
}

// PutUserWithBodyWithResponse request with arbitrary body returning *PutUserResponse
func (c *ClientWithResponses) PutUserWithBodyWithResponse(ctx context.Context, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUserWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

func (c *ClientWithResponses) PutUserWithResponse(ctx context.Context, username Username, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUser(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

// GetTokenByUsernameWithResponse request returning *GetTokenByUsernameResponse
func (c *ClientWithResponses) GetTokenByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetTokenByUsernameResponse, error) {
	rsp, err := c.GetTokenByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenByUsernameResponse(rsp)
}

// ParseGetHieraDataResponse parses an HTTP response from a GetHieraDataWithResponse call
func ParseGetHieraDataResponse(rsp *http.Response) (*GetHieraDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHieraDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateHieraDataResponse parses an HTTP response from a CreateHieraDataWithResponse call
func ParseCreateHieraDataResponse(rsp *http.Response) (*CreateHieraDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHieraDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteHieraDataObjectResponse parses an HTTP response from a DeleteHieraDataObjectWithResponse call
func ParseDeleteHieraDataObjectResponse(rsp *http.Response) (*DeleteHieraDataObjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHieraDataObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHieraDataWithLevelAndKeyResponse parses an HTTP response from a GetHieraDataWithLevelAndKeyWithResponse call
func ParseGetHieraDataWithLevelAndKeyResponse(rsp *http.Response) (*GetHieraDataWithLevelAndKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHieraDataWithLevelAndKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertHieraDataWithLevelAndKeyResponse parses an HTTP response from a UpsertHieraDataWithLevelAndKeyWithResponse call
func ParseUpsertHieraDataWithLevelAndKeyResponse(rsp *http.Response) (*UpsertHieraDataWithLevelAndKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertHieraDataWithLevelAndKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllNodesResponse parses an HTTP response from a GetAllNodesWithResponse call
func ParseGetAllNodesResponse(rsp *http.Response) (*GetAllNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNodeResponse parses an HTTP response from a CreateNodeWithResponse call
func ParseCreateNodeResponse(rsp *http.Response) (*CreateNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteNodeResponse parses an HTTP response from a DeleteNodeWithResponse call
func ParseDeleteNodeResponse(rsp *http.Response) (*DeleteNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNodeByNameResponse parses an HTTP response from a GetNodeByNameWithResponse call
func ParseGetNodeByNameResponse(rsp *http.Response) (*GetNodeByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutNodeByNameResponse parses an HTTP response from a PutNodeByNameWithResponse call
func ParsePutNodeByNameResponse(rsp *http.Response) (*PutNodeByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNodeByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllUsersResponse parses an HTTP response from a GetAllUsersWithResponse call
func ParseGetAllUsersResponse(rsp *http.Response) (*GetAllUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserByUsernameResponse parses an HTTP response from a GetUserByUsernameWithResponse call
func ParseGetUserByUsernameResponse(rsp *http.Response) (*GetUserByUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserResponse parses an HTTP response from a PutUserWithResponse call
func ParsePutUserResponse(rsp *http.Response) (*PutUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTokenByUsernameResponse parses an HTTP response from a GetTokenByUsernameWithResponse call
func ParseGetTokenByUsernameResponse(rsp *http.Response) (*GetTokenByUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
